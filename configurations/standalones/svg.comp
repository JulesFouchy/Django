//? #version 430

uniform int u_NbOfParticles;
uniform float u_aspectRatio;
// Params
uniform int u_count;
uniform int u_intLR;
uniform int u_intUD;
uniform float u_wheel;
uniform float u_ctrlWheel;
uniform float u_shiftWheel;
uniform float u_altWheel;
// Random
uniform float u_seed;
uniform vec2 u_xySeed;
//? float rand(float id, float seed);

struct Bezier {
    vec2 p1;
    vec2 p2;
    vec2 p3;
    vec2 p4;
};

const uint nbCurves = 2;
Bezier curves[nbCurves] = {
    {
        vec2(-1, -1),
        vec2(-1,  1),
        vec2( 0, -1),
        vec2( 0,  0),
    },
    {
        vec2( 0,  0),
        vec2( 0,  1),
        vec2( 1, -1),
        vec2( 1,  1),
    },
};

vec2 drawBezier(float t, Bezier bezier) {
    return      (1-t)*(1-t)*(1-t) * bezier.p1
         + 3. * (1-t)*(1-t)*t     * bezier.p2
         + 3. * (1-t)*t*t         * bezier.p3
         +      t*t*t             * bezier.p4;
}

layout(std430, binding=1) buffer restPositions {
   vec2 restPos[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main(){
    uint gid = gl_GlobalInvocationID.x;

    if (gid < u_NbOfParticles) {
        uint nbPartPerCurve = u_NbOfParticles / nbCurves;
        uint idealNbPart = nbPartPerCurve * nbCurves;
        uint n = gid < idealNbPart ? gid : idealNbPart - (gid - idealNbPart + 1);
        uint id =       n / nbPartPerCurve;
        float t = float(n % nbPartPerCurve) / nbPartPerCurve;
        restPos[gid] = drawBezier(t, curves[id]);
    }
}