struct Bezier {vec2 p1; vec2 p2; vec2 p3; vec2 p4;};
const uint nbCurves = 51;
Bezier curves[nbCurves] = {{vec2(0.840800, 0.660400), vec2(0.852400, 0.543200), vec2(0.881200, -0.172600), vec2(0.000600, -0.852400)}, {vec2(0.000600, -0.852400), vec2(-0.162200, -0.726600), vec2(-0.293800, -0.599800), vec2(-0.400400, -0.476000)}, {vec2(-0.400400, -0.476000), vec2(-0.227200, -0.385400), vec2(-0.122600, -0.252800), vec2(-0.122600, -0.252800)}, {vec2(-0.122600, -0.252800), vec2(0.003600, -0.294400), vec2(0.153600, -0.126600), vec2(0.153600, -0.126600)}, {vec2(0.153600, -0.126600), vec2(0.211400, -0.089600), vec2(0.196600, -0.242400), vec2(0.196600, -0.242400)}, {vec2(0.196600, -0.242400), vec2(0.178800, -0.261800), vec2(0.155000, -0.312400), vec2(0.155000, -0.312400)}, {vec2(0.155000, -0.312400), vec2(0.130733, -0.311400), vec2(0.106467, -0.310400), vec2(0.082200, -0.309400)}, {vec2(0.082200, -0.309400), vec2(0.033200, -0.331600), vec2(0.043600, -0.438400), vec2(0.043600, -0.438400)}, {vec2(0.043600, -0.438400), vec2(0.104400, -0.438400), vec2(0.192200, -0.353800), vec2(0.192200, -0.353800)}, {vec2(0.192200, -0.353800), vec2(0.260400, -0.327200), vec2(0.267800, -0.297400), vec2(0.267800, -0.297400)}, {vec2(0.267800, -0.297400), vec2(0.267800, -0.242467), vec2(0.267800, -0.187533), vec2(0.267800, -0.132600)}, {vec2(0.267800, -0.132600), vec2(0.269200, -0.030000), vec2(0.257600, -0.027400), vec2(0.229200, -0.025600)}, {vec2(0.229200, -0.025600), vec2(0.188400, -0.023200), vec2(0.066000, -0.024200), vec2(0.066000, -0.024200)}, {vec2(0.066000, -0.024200), vec2(0.045200, 0.009800), vec2(0.038000, 0.153800), vec2(0.049600, 0.211800)}, {vec2(0.049600, 0.211800), vec2(0.088800, 0.404400), vec2(0.229200, 0.339400), vec2(0.229200, 0.339400)}, {vec2(0.229200, 0.339400), vec2(0.245600, 0.179000), vec2(0.410400, 0.173200), vec2(0.410400, 0.173200)}, {vec2(0.410400, 0.173200), vec2(0.423800, 0.048600), vec2(0.488400, 0.100000), vec2(0.517400, 0.110800)}, {vec2(0.517400, 0.110800), vec2(0.559400, 0.126600), vec2(0.550200, 0.152400), vec2(0.550200, 0.152400)}, {vec2(0.550200, 0.152400), vec2(0.541400, 0.205800), vec2(0.470000, 0.411000), vec2(0.443200, 0.488000)}, {vec2(0.443200, 0.488000), vec2(0.419400, 0.556200), vec2(0.357600, 0.627400), vec2(0.320000, 0.661800)}, {vec2(0.320000, 0.661800), vec2(0.320000, 0.661800), vec2(0.329200, 0.635000), vec2(0.326000, 0.627800)}, {vec2(0.326000, 0.627800), vec2(0.317000, 0.608400), vec2(0.309600, 0.615800), vec2(0.309600, 0.615800)}, {vec2(0.309600, 0.615800), vec2(0.164200, 0.742000), vec2(0.026000, 0.706400), vec2(0.026000, 0.706400)}, {vec2(0.026000, 0.706400), vec2(0.097200, 0.702000), vec2(0.124000, 0.645600), vec2(0.124000, 0.645600)}, {vec2(0.124000, 0.645600), vec2(0.026000, 0.693200), vec2(0.008200, 0.683800), vec2(-0.040800, 0.666400)}, {vec2(-0.040800, 0.666400), vec2(-0.165400, 0.622200), vec2(-0.284200, 0.626400), vec2(-0.284200, 0.626400)}, {vec2(-0.284200, 0.626400), vec2(-0.241200, 0.568400), vec2(-0.167000, 0.569800), vec2(-0.167000, 0.569800)}, {vec2(-0.167000, 0.569800), vec2(-0.222000, 0.546600), vec2(-0.246600, 0.547400), vec2(-0.265000, 0.541800)}, {vec2(-0.265000, 0.541800), vec2(-0.354000, 0.513600), vec2(-0.377800, 0.445200), vec2(-0.377800, 0.445200)}, {vec2(-0.377800, 0.445200), vec2(-0.312400, 0.445200), vec2(-0.428200, 0.295200), vec2(-0.428200, 0.295200)}, {vec2(-0.428200, 0.295200), vec2(-0.348000, 0.339800), vec2(-0.331200, 0.322800), vec2(-0.333200, 0.322000)}, {vec2(-0.333200, 0.322000), vec2(-0.420800, 0.286000), vec2(-0.446000, 0.220600), vec2(-0.446000, 0.220600)}, {vec2(-0.446000, 0.220600), vec2(-0.501200, 0.102800), vec2(-0.625000, 0.008200), vec2(-0.691400, -0.036400)}, {vec2(-0.691400, -0.036400), vec2(-0.857400, 0.310000), vec2(-0.847800, 0.580600), vec2(-0.840400, 0.655400)}, {vec2(-0.840400, 0.655400), vec2(-0.633400, 0.785800), vec2(-0.324000, 0.860400), vec2(0.013800, 0.860400)}, {vec2(0.013800, 0.860400), vec2(0.364600, 0.860400), vec2(0.691800, 0.780600), vec2(0.840800, 0.660400)}, {vec2(0.840800, 0.660400), vec2(0.840800, 0.660400), vec2(0.840800, 0.660400), vec2(0.840800, 0.660400)}, {vec2(0.000400, -0.900200), vec2(-0.961800, -0.168200), vec2(-0.898200, 0.601400), vec2(-0.886200, 0.694200)}, {vec2(-0.886200, 0.694200), vec2(-0.667600, 0.837600), vec2(-0.348600, 0.916200), vec2(0.013600, 0.916200)}, {vec2(0.013600, 0.916200), vec2(0.385200, 0.916200), vec2(0.733400, 0.828400), vec2(0.886000, 0.696800)}, {vec2(0.886000, 0.696800), vec2(0.897000, 0.613400), vec2(0.964000, -0.167600), vec2(0.000400, -0.900200)}, {vec2(0.000400, -0.900200), vec2(0.000400, -0.900200), vec2(0.000400, -0.900200), vec2(0.000400, -0.900200)}, {vec2(0.937000, 0.737000), vec2(0.775200, 0.884600), vec2(0.412800, 0.980000), vec2(0.013800, 0.980000)}, {vec2(0.013800, 0.980000), vec2(-0.367200, 0.980000), vec2(-0.703400, 0.894600), vec2(-0.932800, 0.739600)}, {vec2(-0.932800, 0.739600), vec2(-0.941400, 0.733600), vec2(-0.953200, 0.725600), vec2(-0.955600, 0.618200)}, {vec2(-0.955600, 0.618200), vec2(-0.961200, 0.358600), vec2(-0.882000, -0.315000), vec2(-0.026400, -0.959800)}, {vec2(-0.026400, -0.959800), vec2(-0.017200, -0.966533), vec2(-0.008000, -0.973267), vec2(0.001200, -0.980000)}, {vec2(0.001200, -0.980000), vec2(0.009667, -0.973333), vec2(0.018133, -0.966667), vec2(0.026600, -0.960000)}, {vec2(0.026600, -0.960000), vec2(0.800800, -0.376400), vec2(0.940600, 0.231800), vec2(0.954800, 0.542400)}, {vec2(0.954800, 0.542400), vec2(0.955000, 0.544000), vec2(0.962200, 0.714000), vec2(0.937000, 0.737000)}, {vec2(0.937000, 0.737000), vec2(0.937000, 0.737000), vec2(0.937000, 0.737000), vec2(0.937000, 0.737000)}};
//? #version 430
//? struct Bezier {
//?     vec2 p1;
//?     vec2 p2;
//?     vec2 p3;
//?     vec2 p4;
//? };
//? const uint nbCurves = 1;
//? Bezier curves[nbCurves] = {{vec2(-1, -1), vec2(-1,  1), vec2( 0, -1), vec2( 0,  0)}};

uniform int u_NbOfParticles;
uniform float u_aspectRatio;
// Params
uniform int u_count;
uniform int u_intLR;
uniform int u_intUD;
uniform float u_wheel;
uniform float u_ctrlWheel;
uniform float u_shiftWheel;
uniform float u_altWheel;
// Random
uniform float u_seed;
uniform vec2 u_xySeed;
//? float rand(float id, float seed);

vec2 drawBezier(float t, Bezier bezier) {
    return      (1-t)*(1-t)*(1-t) * bezier.p1
         + 3. * (1-t)*(1-t)*t     * bezier.p2
         + 3. * (1-t)*t*t         * bezier.p3
         +      t*t*t             * bezier.p4;
}

layout(std430, binding=1) buffer restPositions {
   vec2 restPos[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main(){
    uint gid = gl_GlobalInvocationID.x;

    if (gid < u_NbOfParticles) {
        uint nbPartPerCurve = u_NbOfParticles / nbCurves;
        uint idealNbPart = nbPartPerCurve * nbCurves;
        uint n = gid < idealNbPart ? gid : idealNbPart - (gid - idealNbPart + 1);
        uint id =       n / nbPartPerCurve;
        float t = float(n % nbPartPerCurve) / nbPartPerCurve;
        restPos[gid] = u_wheel * drawBezier(t, curves[id]);
    }
}