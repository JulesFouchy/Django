//? #version 430

uniform int u_NbOfParticles;
uniform float u_aspectRatio;
// Params
uniform int u_count;
uniform int u_intLR;
uniform int u_intUD;
uniform float u_wheel;
uniform float u_ctrlWheel;
uniform float u_shiftWheel;
uniform float u_altWheel;
// Random
uniform float u_seed;
uniform vec2 u_xySeed;
//? float rand(float id, float seed);

layout(std430, binding=1) buffer restPositions {
   vec2 restPos[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main(){
    uint gid = gl_GlobalInvocationID.x;
    if (gid < u_NbOfParticles) {
        // ------------- Your code goes here -------------
        uint nbLines = int(floor(sqrt(u_NbOfParticles)));
        uint idealNbPart = nbLines * nbLines;
        uint id = gid < idealNbPart ? gid : (gid - (u_NbOfParticles - idealNbPart));
        uint row = id / nbLines;
        uint col = id % nbLines;
        //
        restPos[gid] = vec2(
            -1.0 + 2.0 * float(col) / nbLines,
            -1.0 + 2.0 * float(row) / nbLines
        );
        // ------------- Your code ends here -------------
    }
}