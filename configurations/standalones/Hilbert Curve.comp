//? #version 430

uniform int u_NbOfParticles;
uniform float u_aspectRatio;
// Params
uniform int u_count;
uniform int u_LR;
uniform int u_UD;
uniform int u_wheel;
uniform int u_ctrlWheel;
uniform int u_shiftWheel;
uniform int u_altWheel;
// Random
uniform float u_seed;
uniform vec2 u_xySeed;
//? float rand(float id, float seed);

vec2 baseCurve(float t) {
    // triangle
    //float h = sqrt(3) / 2; // equi trg
    /*float h = 0.5;
    if (t < 0.5) {
        t *= 2;
        return t * vec2(0.5, h);
    }
    else {
        t = t * 2 - 1;
        return (1-t) * vec2(0.5, h) + t * vec2(1, 0);
    }*/
    // circle
    const float pi = 3.141593;
    float agl = pi - t * pi;
    return vec2(0.5, 0) + 0.5 * vec2(cos(agl), sin(agl));
    // parabola
    //return vec2(t, -(t-0.5)*(t-0.5)+0.25);
}

mat3 trans(float x, float y) {
    mat3 m = mat3(1.0);
    m[2][0] = x;
    m[2][1] = y;
    return m;
}

mat3 scale(float s) {
    mat3 m = mat3(s);
    m[2][2] = 1.0;
    return m;
}

mat3 scale(float sx, float sy) {
    mat3 m = mat3(1.0);
    m[0][0] = sx;
    m[1][1] = sy;
    return m;
}

mat3 sym() {
    return mat3(
        0, 1, 0,
        1, 0, 0, 
        0, 0, 1
    );
}

vec2 getPosition(uint particleID) {
    float t = particleID / float(u_NbOfParticles);
    vec2 pos;
    mat3 mat = mat3(1.0);

    for (int n = 0; n < u_UD + 3; ++n) {
        int id = int(floor(t * 4));
        t = fract(t * 4);
        switch(id) {
            case 0:
                mat *= sym();
                break;
            case 1:
                mat *= trans(0, 0.5);
                break;
            case 2:
                mat *= trans(0.5, 0.5);
                break;
            case 3:
                mat *= trans(1, 0.5) * scale(-1, -1) * sym();
                break;
        }
        mat *= scale(0.5);
    }
    vec3 pos3 = mat * vec3(baseCurve(t), 1.0);
    pos = pos3.xy / pos3.z;
    return pos * 2.0 - 1.0;
}