//? #version 430
//? vec2 shape(float t, vec2 center, float radius, float rotation);

// Included by the shape
//? uniform int u_NbOfParticles;
//? uniform float u_aspectRatio;
//? // Params
//? uniform int u_count;
//? uniform int u_intLR;
//? uniform int u_intUD;
//? uniform float u_wheel;
//? uniform float u_ctrlWheel;
//? uniform float u_shiftWheel;
//? uniform float u_altWheel;
//? // Random
//? uniform float u_seed;
//? uniform vec2 u_xySeed;
//? float rand(float id, float seed);

layout(std430, binding=1) buffer restPositions {
   vec2 restPos[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main(){
    uint gid = gl_GlobalInvocationID.x;
    if (gid < u_NbOfParticles) {
        int clusterSize = u_NbOfParticles / u_count;
        int clusterID = min(int(gid) / clusterSize, u_count-1);
        float clusterCoord = (gid % clusterSize) / float(clusterSize);

        vec2 center = vec2(rand(clusterID, u_seed + u_xySeed.y), rand(clusterID, u_seed + u_xySeed.x));
        center.x *= u_aspectRatio;
        float radiusVar = 0.15;
        float radius = 0.33 * u_wheel * (1 + 2 * radiusVar * rand(clusterID + 789.321, u_seed + 123.456) - radiusVar);
        center.x = clamp(center.x, -u_aspectRatio + radius, u_aspectRatio - radius);
        center.y = clamp(center.y, -1.0 + radius, 1.0 - radius);
        restPos[gid] = shape(clusterCoord, center, radius, 6.28 * rand(clusterID, u_seed + 123.456));
    }
}