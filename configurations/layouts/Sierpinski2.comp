//? #version 430
//  ||| Include all the available values.
//  vvv
//? uniform int u_NbOfParticles; uniform float u_aspectRatio; uniform int u_LR; uniform int u_UD; uniform int u_wheel; uniform int u_ctrlWheel; uniform int u_shiftWheel; uniform int u_altWheel; uniform float u_seed; uniform vec2 u_xySeed; float rand(float seedX, float seedY); vec2 shape(float t, vec2 center, float radius, float rotation);

const float tau = 6.28318530717958647692;

const mat3 rot = mat3( cos(tau/3.), sin(tau/3.), 0.,
					  -sin(tau/3.), cos(tau/3.), 0.,
					  0.,           0.,          1.
);

const mat3 rot2 = mat3( cos(2.*tau/3.), sin(2.*tau/3.), 0.,
					   -sin(2.*tau/3.), cos(2.*tau/3.), 0.,
					   0.,              0.,             1.
);

mat3 trans(vec2 v) {
	return mat3(1., 0.,   0.,
		        0., 1.,   0.,
		        v.x, v.y, 1.);
}

mat3 rotWithOrigin(mat3 rot, vec2 origin) {
	return trans(origin) * rot * trans(-origin);
}

const vec2 dirUp = vec2(0.0, 1.0);
const vec2 dirLeft = vec2(-0.866025403784439, -0.5);
const vec2 dirRight = vec2(0.866025403784439, -0.5);

vec2 getPosition(uint particleID) {
	int N = max(u_UD + 2, 0);
	float t = particleID / float(u_NbOfParticles);
	float radius = 2 / (1.5 + pow(0.5, N+1)); // Makes sure that the full height is always exactly 2 to fit in the screen
	float finalRadius = radius * pow(0.5, N);
	vec2 center = vec2(0.0, -1./3. + 1./3. * finalRadius); // Place the center of the "triangle footprint" so that the "circle footprint" will fit exactly in the screen
	mat3 transform = trans(center);

	for (int _ = 0; _ < max(u_UD + 2, 0); _++) {
		radius /= 2.0;
		int id = int(floor(t * 3.0));
		t =          fract(t * 3.0);
		vec2 dir;
		switch (id) {
			case 0:
				dir = dirUp;
				break;
			case 1:
				dir = dirLeft;
				break;
			case 2:
				dir = dirRight;
				break;
		}
		transform = trans(dir * radius) * transform;
		switch (id) {
			case 0:
				break;
			case 1:
				transform = rot * transform;
				break;
			case 2:
				transform = rot2 * transform;
				break;
		}
	}
	
	float scale = 0.1 * u_shiftWheel + 0.9;
	return scale * shape(t, (transform * vec3(0., 0., 1.)).xy, radius, u_wheel * 3.141592653 / 6.0);
}