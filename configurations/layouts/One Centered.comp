//? #version 430
//  ||| Include all the available values. They are explained at the bottom of the file.
//  vvv
//? uniform int u_NbOfParticles; uniform float u_aspectRatio; uniform int u_count; uniform int u_LR; uniform int u_UD; uniform int u_wheel; uniform int u_ctrlWheel; uniform int u_shiftWheel; uniform int u_altWheel; uniform float u_seed; uniform vec2 u_xySeed; float rand(float seedX, float seedY); vec2 shape(float t, vec2 center, float radius, float rotation);

// A layout configuration has this "shape" function passed to it and it's goal is to draw as many shapes whereever it wants
// vec2 shape(float t, vec2 center, float radius, float rotation);
// t is the position on the shape (0 for the beginning, 1 for the end)

// getPosition is called for every particle, each with a different ID going from 0 to u_NbOfParticles-1

vec2 getPosition(uint particleID) {
	return shape(particleID / float(u_NbOfParticles), vec2(0.0), u_shiftWheel*0.1 + 0.9, u_wheel * 3.141592653 / 24.0);
}

// The Coordinate System is :
// (0, 0) is the center
// The y values go from -1 (at the bottom) to 1 (at the top)
// The x values go from -u_aspectRatio (on the left) to +u_aspectRatio (on the right)

// A lot of values are available to you when you create a configuration :
// Please note that all the parameters default to 0 at the beginnning of the application, so you should add your own offset to have the default value you want
// For example, if you want a size of 1 by default, you should use u_wheel + 1.0

// Also note that all the parameters can be positive or negative
// You should clamp or abs them if you want to make sure they will be positive
//            |||	   |||
//            vvv	   vvv
//   max(param, 0)     abs(param)

// int u_wheel;
// This number is controlled by the mouse wheel
// Is is typically used to rotate the shapes

// int u_shiftWheel;
// This number is controlled by the mouse wheel while holding SHIFT
// Is is typically used as the size of the shapes

// int u_ctrlWheel;
// This number is controlled by the mouse wheel while holding CTRL
// Is is typically used as a parameter for the shapes or standalones

// int u_altWheel;
// This number is controlled by the mouse wheel while holding ALT
// Is is typically used as a parameter for the layouts or standalones

// int u_count;
// This number is controlled with the + and - keys, as well as the numbers (from the keypad and the row above qwerty...)
// Its default value is 5 at the start of the app
// +/- change the count by 1
// The numbers 0, 1, 2... set the count to respectively 0, 1, 2, 4, 8, 16 etc.
// Is is typically used as a parameter for the layouts or standalones

// uniform int u_LR;
// This number is controlled by the left/right arrows
// Is is typically used as a parameter for the shapes or standalones

// int u_UD;
// This number is controlled by the up/down arrows
// Is is typically used as a parameter for the layouts or standalones

// int u_NbOfParticles;
// Obviously, the total number of particles

// float u_aspectRatio;
// The aspect ratio (== width/height) of the window (e.g. 16/9 for a fullscreen window on a computer)

// Random
// float rand(float id, float seed);
// float u_seed;
// vec2 u_xySeed;
// The intended usage is, to get a random float
//	 rand(id, u_seed)
// Or, to get a random vec2
//	 vec2(rand(id, u_seed + u_xySeed.y), rand(id, u_seed + u_xySeed.x))
// u_seed is changed randomly each type you press space
// u_seed and u_xySeed can be controlled from the Random panel in the app