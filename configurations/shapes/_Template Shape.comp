//? #version 430

uniform int u_NbOfParticles;
uniform float u_aspectRatio;
// Parameters
uniform int u_LR;
uniform int u_ctrlWheel;
uniform int u_wheel;	  // I wouldn't recommend using this one for the shapes, see comments in the bottom section
uniform int u_shiftWheel; // I wouldn't recommend using this one for the shapes, see comments in the bottom section
uniform int u_altWheel;	  // I wouldn't recommend using this one for the shapes, see comments in the bottom section
uniform int u_count;	  // I wouldn't recommend using this one for the shapes, see comments in the bottom section
uniform int u_UD;		  // I wouldn't recommend using this one for the shapes, see comments in the bottom section
// Random
uniform float u_seed;
uniform vec2 u_xySeed;
//? float rand(float id, float seed);


// The "shape" function will be used by the layout configurations
// t is the position/progress on the shape : 0 for the beginning, 1 for the end
// For example, if you want to draw a circle the angle of the current point will be t * TWO_PI

vec2 shape(float t, vec2 center, float radius, float rotation) {
	float angle = t * 6.28 + rotation;
	return center + radius * vec2(cos(angle), sin(angle));
}


// The Coordinate System is :
// (0, 0) is the center
// The y values go from -1 (at the bottom) to 1 (at the top)
// The x values go from -u_aspectRatio (on the left) to +u_aspectRatio (on the right)

// float u_aspectRatio;
// The aspect ratio (== width/height) of the window (e.g. 16/9 for a fullscreen window on a computer)

// int u_NbOfParticles;
// Obviously, the total number of particles

// Random
// float rand(float id, float seed);
// float u_seed;
// vec2 u_xySeed;
// The intended usage is, to get a random float :
//	 rand(id, u_seed)
// Or, to get a random vec2 :
//	 vec2(rand(id, u_seed + u_xySeed.y), rand(id, u_seed + u_xySeed.x))
// u_seed is changed randomly each time you press space
// u_seed and u_xySeed can be controlled from the Random panel in the app

// A lot of values are available to you when you create a configuration :
// Please note that all the parameters default to 0 at the beginnning of the application (except u_count which starts at 5), so you should add your own offset to have the default value you want
// For example, if you want a radius of 1 by default, you should use u_shiftWheel + 1.0
// Also all the parameters change by 1 each time, so you probably want to adapt the rate of change :
// u_shiftWheel * 0.1 to change in steps of 0.1

// Also note that all the parameters can be positive or negative
// You should clamp or abs them if you want to make sure they will be positive
//            |||	   |||
//            vvv	   vvv
//   max(param, 0)     abs(param)

// int u_ctrlWheel;
// This number is controlled by the mouse wheel while holding CTRL
// Is is typically used as a parameter for the shapes or standalones

// uniform int u_LR;
// This number is controlled by the left/right arrows
// Is is typically used as a parameter for the shapes or standalones



//-------------------------------------------------
// The parameters below are meant to be used by the layouts.
// I wouldn't recommend using them for the shapes as you would have one parameter controlling two things at the same time (one in the shape and one in the layout)
//-------------------------------------------------

// int u_wheel;
// This number is controlled by the mouse wheel
// Is is typically used to rotate the shapes

// int u_shiftWheel;
// This number is controlled by the mouse wheel while holding SHIFT
// Is is typically used as the size of the shapes

// int u_altWheel;
// This number is controlled by the mouse wheel while holding ALT
// Is is typically used as a parameter for the layouts or standalones

// int u_count;
// This number is controlled with the + and - keys, as well as the numbers (from the keypad as well as the row above qwerty)
// Its default value is 5 at the start of the app
// +/- change the count by 1
// The numbers 0, 1, 2... set the count to respectively 0, 1, 2, 4, 8, 16 etc.
// Is is typically used as a parameter for the layouts or standalones

// int u_UD;
// This number is controlled by the up/down arrows
// Is is typically used as a parameter for the layouts or standalones