uniform int u_NbOfParticles;
uniform float u_aspectRatio;
// Params
uniform int u_LR;
uniform int u_UD;
uniform int u_wheel;
uniform int u_ctrlWheel;
uniform int u_shiftWheel;
uniform int u_altWheel;
// Random
uniform float u_seed;
uniform vec2 u_xySeed;
//? float rand(float id, float seed);

vec2 shape(float t, vec2 center, float radius, float rotation) {
    float nbBranches = float(max(u_LR + 6, 1));
    float branchId    = floor(t * nbBranches);
    float branchCoord = fract(t * nbBranches);
    float angle = branchId * 6.28 / nbBranches - 3.14*0.5 + rotation;
    return center + radius * branchCoord * vec2(cos(angle), sin(angle));
}