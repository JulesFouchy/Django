#version 430

const float letterWidth  = 0.1;
const float letterHeight = 0.3;

uniform int u_nbLetters;

uniform int u_NbOfParticles;
uniform float u_aspectRatio;

layout(std430, binding=5) restrict readonly buffer lettersChars{
   int letters[];
};
layout(std430, binding=6) restrict readonly buffer lettersOffsets{
   int offsets[];
};

vec2 letterA(float t);
vec2 letterB(float t);
vec2 letterC(float t);
vec2 letterD(float t);
vec2 letterE(float t);
vec2 letterF(float t);
vec2 letterG(float t);
vec2 letterH(float t);
vec2 letterI(float t);
vec2 letterJ(float t);
vec2 letterK(float t);
vec2 letterL(float t);
vec2 letterM(float t);
vec2 letterN(float t);
vec2 letterO(float t);
vec2 letterP(float t);
vec2 letterQ(float t);
vec2 letterR(float t);
vec2 letterS(float t);
vec2 letterT(float t);
vec2 letterU(float t);
vec2 letterV(float t);
vec2 letterW(float t);
vec2 letterX(float t);
vec2 letterY(float t);
vec2 letterZ(float t);

layout(std430, binding=1) buffer restPositions {
   vec2 restPos[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main(){
    uint gid = gl_GlobalInvocationID.x;
    if (gid < u_NbOfParticles) {
        if (u_nbLetters > 0) {
            uint nbPartPerLetter = u_NbOfParticles / u_nbLetters;
            uint idealNbPart = nbPartPerLetter * u_nbLetters;
            uint n = gid < idealNbPart ? gid : idealNbPart - (gid - idealNbPart + 1);
            uint id =       n / nbPartPerLetter;
            float t = float(n % nbPartPerLetter) / nbPartPerLetter;
            vec2 pos;
            switch (letters[id]) {
                case 0:
                    pos = letterA(t);
                    break;
                case 1:
                    pos = letterB(t);
                    break;
                case 2:
                    pos = letterC(t);
                    break;
                case 3:
                    pos = letterD(t);
                    break;
                case 4:
                    pos = letterE(t);
                    break;
                case 5:
                    pos = letterF(t);
                    break;
                case 6:
                    pos = letterG(t);
                    break;
                case 7:
                    pos = letterH(t);
                    break;
                case 8:
                    pos = letterI(t);
                    break;
                case 9:
                    pos = letterJ(t);
                    break;
                case 10:
                    pos = letterK(t);
                    break;
                case 11:
                    pos = letterL(t);
                    break;
                case 12:
                    pos = letterM(t);
                    break;
                case 13:
                    pos = letterN(t);
                    break;
                case 14:
                    pos = letterO(t);
                    break;
                case 15:
                    pos = letterP(t);
                    break;
                case 16:
                    pos = letterQ(t);
                    break;
                case 17:
                    pos = letterR(t);
                    break;
                case 18:
                    pos = letterS(t);
                    break;
                case 19:
                    pos = letterT(t);
                    break;
                case 20:
                    pos = letterU(t);
                    break;
                case 21:
                    pos = letterV(t);
                    break;
                case 22:
                    pos = letterW(t);
                    break;
                case 23:
                    pos = letterX(t);
                    break;
                case 24:
                    pos = letterY(t);
                    break;
                case 25:
                    pos = letterZ(t);
                    break;
            }
            pos.x *= letterWidth;
            pos.y *= letterHeight;
            pos.x += -u_aspectRatio + 1.5 * letterWidth + 3.0 * letterWidth * offsets[id];
            //
            restPos[gid] = pos;
        }
        else {
            restPos[gid] = vec2(-u_aspectRatio + 1.5 * letterWidth, 0.0);
        }
    }
}

vec2 letterA(float t) {
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, -1),
                vec2(0, 1),
            t);
        case 1:
            return mix(
                vec2(0, 1),
                vec2(1, -1),
            t);
        case 2:
            return mix(
                vec2(-0.5, 0),
                vec2(0.5, 0),
            t);
    }
}

vec2 letterB(float t) {
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, -1),
                vec2(-1,  1),
            t);
        case 1:
            float a = 3.14*0.5 - t * 3.14;
            return vec2(2.0 * cos(a), 0.5 * sin(a)) + vec2(-1, 0.5);
        case 2:
            a = 3.14*0.5 - t * 3.14;
            return vec2(2.0 * cos(a), 0.5 * sin(a)) + vec2(-1, -0.5);
    }
}

vec2 letterC(float t) {
    float a = 3.14*0.5 + t * 3.14;
    return vec2(2.0 * cos(a), sin(a)) + vec2(1, 0);
}

vec2 letterD(float t) {
    const int nbParts = 2;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, -1),
                vec2(-1,  1),
            t);
        case 1:
            float a = 3.14*0.5 - t * 3.14;
            return vec2(2.0 * cos(a), sin(a)) + vec2(-1, 0);
    }
}
vec2 letterE(float t) {
    const int nbParts = 4;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(1, 1),
                vec2(-1, 1),
            t);
        case 1:
            return mix(
                vec2(-1, 1),
                vec2(-1, -1),
            t);
        case 2:
            return mix(
                vec2(-1, -1),
                vec2(1, -1),
            t);
        case 3:
            return mix(
                vec2(-1, 0),
                vec2(0, 0),
            t);
    }
}
vec2 letterF(float t) {    
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(1, 1),
                vec2(-1, 1),
            t);
        case 1:
            return mix(
                vec2(-1, 1),
                vec2(-1, -1),
            t);
        case 2:
            return mix(
                vec2(-1, 0),
                vec2(0, 0),
            t);
    }
}
vec2 letterG(float t) {
    const int nbParts = 2;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            float a = 3.14*0.3 + t * 3.14 * 1.7;
            return vec2(0.75 * cos(a), sin(a)) + vec2(-0.25, 0);
        case 1:
            return mix(
                vec2(0, 0),
                vec2(1, 0),
            t);
    }
}
vec2 letterH(float t) {
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(-1, -1),
            t);
        case 1:
            return mix(
                vec2(-1, 0),
                vec2(1, 0),
            t);
        case 2:
            return mix(
                vec2(1, 1),
                vec2(1, -1),
            t);
    }
}
vec2 letterI(float t) {
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(1, 1),
            t);
        case 1:
            return mix(
                vec2(0, 1),
                vec2(0, -1),
            t);
        case 2:
            return mix(
                vec2(-1, -1),
                vec2(1, -1),
            t);
    }
}
vec2 letterJ(float t) {
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(1, 1),
            t);
        case 1:
            return mix(
                vec2(0, 1),
                vec2(0, -0.5),
            t);
        case 2:
            float a = - t * 3.14;
            return 0.5 * vec2(cos(a), sin(a)) + vec2(-0.5, -0.5);
    }
}
vec2 letterK(float t) {
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(-1, -1),
            t);
        case 1:
            return mix(
                vec2(-1, 0),
                vec2(1, 1),
            t);
        case 2:
            return mix(
                vec2(-1, 0),
                vec2(1, -1),
            t);
    }
}
vec2 letterL(float t) {
    const int nbParts = 2;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(-1, -1),
            t);
        case 1:
            return mix(
                vec2(-1, -1),
                vec2(1, -1),
            t);
    }
}
vec2 letterM(float t) {
    const int nbParts = 4;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, -1),
                vec2(-1, 1),
            t);
        case 1:
            return mix(
                vec2(-1, 1),
                vec2(0, 0),
            t);
        case 2:
            return mix(
                vec2(0, 0),
                vec2(1, 1),
            t);
        case 3:
            return mix(
                vec2(1, 1),
                vec2(1, -1),
            t);
    }
}
vec2 letterN(float t) {
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, -1),
                vec2(-1, 1),
            t);
        case 1:
            return mix(
                vec2(-1, 1),
                vec2(1, -1),
            t);
        case 2:
            return mix(
                vec2(1, -1),
                vec2(1, 1),
            t);
    }
}
vec2 letterO(float t) {
    float a = t * 6.28;
    return vec2(cos(a), sin(a));
}
vec2 letterP(float t) {
    const int nbParts = 2;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, -1),
                vec2(-1, 1),
            t);
        case 1:
            float a = 3.14*0.5 - t * 3.14;
            return vec2(2.0 * cos(a), 0.5 * sin(a)) + vec2(-1, 0.5);
    }
}
vec2 letterQ(float t) {
    const int nbParts = 2;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            float a = t * 6.28;
            return vec2(cos(a), sin(a));
        case 1:
            return mix(
                vec2(0.3, -0.3),
                vec2(1, -1),
            t);
    }
}
vec2 letterR(float t) {
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, -1),
                vec2(-1, 1),
            t);
        case 1:
            float a = 3.14*0.5 - t * 3.14;
            return vec2(2.0 * cos(a), 0.5 * sin(a)) + vec2(-1, 0.5);
        case 2:
            return mix(
                vec2(-1, 0),
                vec2(1, -1),
            t);
    }
}
vec2 letterS(float t) {
    const int nbParts = 4;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, -1),
                vec2(0, -1),
            t);
        case 1:
            float a = -3.14*0.5 + t * 3.14;
            return vec2(cos(a), 0.5 * sin(a)) + vec2(0, -0.5);
        case 2:
            a = -3.14*0.5 - t * 3.14;
            return vec2(cos(a), 0.5 * sin(a)) + vec2(0, 0.5);
        case 3:
            return mix(
                vec2(0, 1),
                vec2(1, 1),
            t);
    }
}
vec2 letterT(float t) {
    const int nbParts = 2;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(1, 1),
            t);
        case 1:
            return mix(
                vec2(0, 1),
                vec2(0, -1),
            t);
    }
}
vec2 letterU(float t) {
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(-1, 0),
            t);
        case 1:
            float a = 3.14 + t * 3.14;
            return vec2(cos(a), sin(a));
        case 2:
            return mix(
                vec2(1, 0),
                vec2(1, 1),
            t);
    }
}
vec2 letterV(float t) {
    const int nbParts = 2;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(0, -1),
            t);
        case 1:
            return mix(
                vec2(0, -1),
                vec2(1, 1),
            t);
    }
}
vec2 letterW(float t) {
    const int nbParts = 4;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(-1, -1),
            t);
        case 1:
            return mix(
                vec2(-1, -1),
                vec2(0, 0),
            t);
        case 2:
            return mix(
                vec2(0, 0),
                vec2(1, -1),
            t);
        case 3:
            return mix(
                vec2(1, -1),
                vec2(1, 1),
            t);
    }
}
vec2 letterX(float t) {
    const int nbParts = 2;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(1, -1),
            t);
        case 1:
            return mix(
                vec2(1, 1),
                vec2(-1, -1),
            t);
    }
}
vec2 letterY(float t) {
    const int nbParts = 3;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(0, 0),
            t);
        case 1:
            return mix(
                vec2(0, 0),
                vec2(1, 1),
            t);
        case 2:
            return mix(
                vec2(0, 0),
                vec2(0, -1),
            t);
    }
}
vec2 letterZ(float t) {
    const int nbParts = 4;
    int id = int(floor(t * nbParts));
    t =          fract(t * nbParts);
    switch (id) {
        case 0:
            return mix(
                vec2(-1, 1),
                vec2(1, 1),
            t);
        case 1:
            return mix(
                vec2(1, 1),
                vec2(-1, -1),
            t);
        case 2:
            return mix(
                vec2(-1, -1),
                vec2(1, -1),
            t);
        case 3:
            return mix(
                vec2(-0.5, 0),
                vec2(0.5, 0),
            t);
    }
}