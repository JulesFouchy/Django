//? #version 430
//? struct Bezier {
//?     vec2 p1;
//?     vec2 p2;
//?     vec2 p3;
//?     vec2 p4;
//? };
//? const uint nbCurves = 1;
//? Bezier curves[nbCurves] = {{vec2(-1, -1), vec2(-1,  1), vec2( 0, -1), vec2( 0,  0)}};

uniform int u_NbOfParticles;
uniform float u_aspectRatio;
// Params
uniform int u_count;
uniform int u_intLR;
uniform int u_intUD;
uniform float u_wheel;
uniform float u_ctrlWheel;
uniform float u_shiftWheel;
uniform float u_altWheel;
// Random
uniform float u_seed;
uniform vec2 u_xySeed;
//? float rand(float id, float seed);

vec2 drawBezier(float t, Bezier bezier) {
    return      (1-t)*(1-t)*(1-t) * bezier.p1
         + 3. * (1-t)*(1-t)*t     * bezier.p2
         + 3. * (1-t)*t*t         * bezier.p3
         +      t*t*t             * bezier.p4;
}

vec2 shape(float t, vec2 center, float radius, float rotation) {
	uint id = uint(floor(t * nbCurves));
          t =      fract(t * nbCurves);
    return center + radius * drawBezier(t, curves[id]);
}