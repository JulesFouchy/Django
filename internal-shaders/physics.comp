#version 430
//#extension GL_ARB_compute_shader : enable
//#extension GL_ARB_shader_storage_buffer_object : enable
float snoise(vec2 v);

uniform int u_NbOfParticles;
// Physics
uniform float dt;
uniform float u_Stiffness;
uniform float u_Damping;
// Wind
uniform float u_windNoisePuls;
uniform float u_windMaxStrength;
uniform float u_windMinStrength;
uniform float u_windDirectionAngle;
uniform vec2 u_windOffset;
// Mouse
uniform vec2 u_mouse;
uniform bool u_bForceField;
uniform float u_burstStrength;

struct particle{
    vec2 pos;
    vec2 vel;
};

layout(std430, binding=0) buffer particles{
   particle part[];
};
layout(std430, binding=1) buffer restPositions{
   vec2 restPos[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main(){
    uint gid = gl_GlobalInvocationID.x;

    if (gid < u_NbOfParticles) {
        vec2 dir = restPos[gid] - part[gid].pos;
        vec2 acc = dir * u_Stiffness - part[gid].vel * u_Damping;
        // wind
        float agl = u_windDirectionAngle + 6.28*0.1 * snoise(u_windNoisePuls * part[gid].pos + u_windOffset + 123.4567);
        float strength = 0.5 + 0.5 * snoise(u_windNoisePuls * part[gid].pos + u_windOffset);
        strength = strength * (u_windMaxStrength - u_windMinStrength) + u_windMinStrength;
        acc += strength * vec2(cos(agl), sin(agl));
        // force field
        if (u_bForceField) {
            vec2 dl = part[gid].pos - u_mouse;
            float d = length(dl);
            float r = 0.3;
            part[gid].pos = d < r
                ? u_mouse + r * normalize(dl)
                : part[gid].pos;
        }
        // burst
        if (u_burstStrength > 0.0) {
            vec2 dl = part[gid].pos - u_mouse;
            part[gid].vel += u_burstStrength * normalize(dl);
        }
        // apply
        part[gid].vel += acc * dt;
        part[gid].pos += part[gid].vel * dt;
    }
}


// Simplex 2D noise by https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}
//